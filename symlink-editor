#!/usr/bin/env python
# -*- coding: utf-8 -*-
# created 2017/03/12-14 by tassaron
# updated 2017/03/17-19
import argparse
import os
from subprocess import call
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

HOME = os.getenv("HOME")
DEFAULTPATH = '%s/Bookmarks' % HOME
SRCPATH = ( "%s-src" % os.path.realpath(__file__))
OSERRORMSG =\
'''Couldn't complete file operation.

This could be because a file with that name already exists,
you don't have write permission, a file changed while you
were editing it, or the path contains a directory that does
not exist.'''

# TODO:
# create own masks for os module to reduce repetitious strings
# combine all copy-pasted if statements into checkSelectedRow()?
# fix row getting unselected after each action
# make killme() unnecessary >.>
# combine 'link to' and 'new' into one with a browse button

class askWindow(Gtk.Dialog):
    def __init__(self, message):
        Gtk.Dialog.__init__(self, title="?")
        self.set_border_width(10)
        windowBody = self.get_content_area()
        windowBody.add(Gtk.Label(message))
        self.add_buttons(Gtk.STOCK_YES, Gtk.ResponseType.YES, Gtk.STOCK_NO, Gtk.ResponseType.NO)
        self.show_all()

class oopsWindow(Gtk.Dialog):
    def __init__(self, message):
        Gtk.Dialog.__init__(self, title="Oops")
        self.set_border_width(10)
        myBody = self.get_content_area()
        myBody.add(Gtk.Label(message))
        self.add_button(Gtk.STOCK_OK, Gtk.ResponseType.OK)
        self.show_all()
        self.run()
        self.destroy()

class MainWindow(Gtk.Window):
    def __init__(self):
        # call mom's initializer first :)
        Gtk.Window.__init__(self, title="Symlink Editor")

        # attributes
        self.selectedRow=-1
        self.rows=[]
        self.SHOWFOLDERS=False
        self.SHOWHIDDEN=False
        self.closeme=False

        # do the rest in show_all() in case we never wanna show this window...

    def show_all(self, recreate=True):
        if recreate:
            # create the mainwindow
            self.set_border_width(10)
            # make navigation widgets
            self.filepathText = Gtk.Entry()
            self.filepathText.set_icon_from_icon_name(Gtk.PositionType.LEFT, 'folder')
            self.filepathText.set_icon_tooltip_text(Gtk.PositionType.LEFT, 'Go up one directory')
            self.filepathText.connect('icon-press', self.goUpDirectory)
            self.filepathText.connect('activate', self.changeDirectory)
            goButton = Gtk.Button(label="Go")
            goButton.connect("clicked", self.changeDirectory)
            navBox = Gtk.Box()
            navBox.pack_start(self.filepathText, True, True, 0)
            navBox.pack_start(goButton, False, False, 0)
            # make action button widgets
            wrenchIcon = Gtk.Image(); wrenchIcon.set_from_file("%s/wrench.png" % SRCPATH)
            notepadIcon = Gtk.Image(); notepadIcon.set_from_file("%s/notepad.png" % SRCPATH)
            minusIcon = Gtk.Image(); minusIcon.set_from_file("%s/minus.png" % SRCPATH)
            plusIcon = Gtk.Image(); plusIcon.set_from_file("%s/plus.png" % SRCPATH)
            arrowIcon = Gtk.Image(); arrowIcon.set_from_file("%s/arrow.png" % SRCPATH)
            self.actionButton1 = Gtk.Button(label="Edit")
            self.actionButton1.set_image(wrenchIcon)
            self.actionButton1.connect("clicked", self.editAction)
            self.actionButton1b = Gtk.Button(label="Copy")
            self.actionButton1b.set_image(notepadIcon)
            self.actionButton1b.connect("clicked", self.copyAction)
            self.actionButton1c = Gtk.Button(label=" Move")
            self.actionButton1c.set_image(arrowIcon)
            self.actionButton1c.connect("clicked", self.moveAction)
            self.actionButton2 = Gtk.Button(label="New")
            self.actionButton2.set_image(plusIcon)
            self.actionButton2.connect("clicked", self.newAction)
            plusIcon = Gtk.Image(); plusIcon.set_from_file("%s/plus.png" % SRCPATH)
            self.actionButton3 = Gtk.Button(label="Delete")
            self.actionButton3.set_image(minusIcon)
            self.actionButton3.connect("clicked", self.deleteAction)
            self.actionButton4 = Gtk.CheckButton()
            self.actionButton4.connect("toggled",self.toggleShowFolders)
            # attach paramaters are: col, row, wide, tall
            self.actionButtonBox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
            self.actionButtonBox.pack_start(self.actionButton1, False, False, 0)
            self.actionButtonBox.pack_start(self.actionButton1b, False, False, 0)
            self.actionButtonBox.pack_start(self.actionButton1c, False, False, 0)
            self.actionButtonBox.pack_start(self.actionButton2, False, False, 0)
            self.actionButtonBox.pack_start(self.actionButton3, False, False, 0)
            box = Gtk.Box(); box.add(Gtk.Label("Show folders"))
            box.pack_start(self.actionButton4, False, False, 0)
            self.actionButtonBox.pack_start(box, False, False, 0)
            # then the file listing widgets
            self.filetree = Gtk.ListBox()
            self.filetree.set_activate_on_single_click=False
            self.filetree.connect("row-selected", self.selectFile)
            self.filetree.connect("row-activated", self.navigate)
            # make a scrolledwindow for the filetree in case it's long
            filetreeWindow = Gtk.ScrolledWindow()
            filetreeWindow.set_border_width(10)
            filetreeWindow.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
            filetreeWindow.add_with_viewport(self.filetree)
            filetreeWindow.set_size_request(400, 400)
            # make 'open with file manager' button
            openFmBox = Gtk.Box()
            folderIcon = Gtk.Image(); folderIcon.set_from_file("%s/folderb.png" % SRCPATH)
            openFmButton = Gtk.Button(label="File Manager")
            openFmButton.set_image(folderIcon)
            openFmButton.connect("clicked", openFm)
            openFmBox.add(openFmButton)

            # place all the freaking widgets
            self.bodyGrid = Gtk.Grid()
            self.add(self.bodyGrid)
            self.bodyGrid.add(openFmBox)
            self.bodyGrid.attach(self.actionButtonBox, 0, 1, 1, 1) # action buttons
            self.bodyGrid.attach(navBox, 1, 0, 1, 1) # col, row, width, height
            self.bodyGrid.attach_next_to(filetreeWindow, navBox, Gtk.PositionType.BOTTOM, 1, 1)
        else:
            # call dad's method to show the contents
            Gtk.Window.show_all(self)

    def updateFileListing(self):
        # dirname of the '/' root directory causes errors, so this hack fixes them
        global PWD
        if PWD.startswith('//'):
            PWD = PWD[1:]
        self.filepathText.set_text(PWD)
        # empty the old contents of filetree
        for row in self.filetree:
            self.filetree.remove(row)
        self.rows = []
        try:
            allFiles = os.listdir(PWD)
            # woohoo list comprehensions!
            symlinks = [ifile for ifile in allFiles if os.path.islink("%s/%s" % (PWD, ifile))]
            if self.SHOWFOLDERS == True:
                if self.SHOWHIDDEN:
                    directories = [ifile for ifile in allFiles \
                                    if os.path.isdir("%s/%s" % (PWD, ifile)) and \
                                    not os.path.islink("%s/%s" % (PWD, ifile))]
                else:
                    directories = [ifile for ifile in allFiles \
                                    if os.path.isdir("%s/%s" % (PWD, ifile)) and \
                                    not os.path.islink("%s/%s" % (PWD, ifile)) and \
                                    not ifile.startswith(".")]
                for ifile in sorted(directories):
                    self.rows.append( [ifile, False] )
                    newRow = Gtk.ListBoxRow(); rowBody = Gtk.Box()
                    folderIcon = Gtk.Image()
                    folderIcon.set_from_file("%s/folder.png" % SRCPATH)
                    rowBody.pack_start(folderIcon, False, False, 0)
                    rowBody.pack_start(Gtk.Label(" %s" % ifile), False, False, 0)
                    newRow.add(rowBody)
                    self.filetree.add(newRow)
            totalLinks = 0
            for ifile in sorted(symlinks):
                totalLinks+=1
                linkTarget = os.readlink("%s/%s" % (PWD, ifile))
                self.rows.append( [ifile, linkTarget] )
                newRow = Gtk.ListBoxRow(); rowBody = Gtk.Box()
                label = Gtk.Label()
                label.set_markup("<b>%s â†’</b> %s" % (ifile, linkTarget))
                rowBody.add(label)
                newRow.add(rowBody)
                self.filetree.add(newRow)
            if totalLinks==0:
                self.filetree.add(Gtk.Label("No links here :("))
                self.rows.append( [False, False] )
        except OSError:
            self.filetree.add(Gtk.Label("File doesn't exist (check permissions?)"))
            self.rows.append( [False, False] )
        self.show_all(recreate=False)

    def changeDirectory(self, widget):
        global PWD; PWD = self.filepathText.get_text()
        self.updateFileListing()

    def goUpDirectory(self, widget, idk, idc):
        self.filepathText.set_text(os.path.dirname(self.filepathText.get_text()))
        self.changeDirectory(widget)

    def navigate(self, widget, row):
        if self.selectedRow != -1:
            selectedLink = self.rows[self.selectedRow]
        if self.selectedRow != -1 and selectedLink[0]!=False and selectedLink[1]==False:
            self.filepathText.set_text('%s/%s' % (PWD, selectedLink[0]))
            self.changeDirectory(widget)

    def selectFile(self, filelist, row):
        if row:
            self.selectedRow = row.get_index()
        else:
            self.selectedRow = -1

    def toggleShowFolders(self, widget):
        if self.SHOWFOLDERS == False:
            self.hiddenFolderBox = Gtk.Box(); self.hiddenFolderBox.add(Gtk.Label("Show hidden"))
            self.actionButton5 = Gtk.CheckButton()
            self.actionButton5.connect("toggled",self.toggleShowHidden)
            self.hiddenFolderBox.pack_start(self.actionButton5, False, False, 0)
            self.actionButtonBox.pack_start(self.hiddenFolderBox, False, False, 0)
        else:
            self.actionButton5.set_active(False)
            self.hiddenFolderBox.destroy()
        self.SHOWFOLDERS = not self.SHOWFOLDERS
        self.updateFileListing()

    def toggleShowHidden(self, widget):
        self.SHOWHIDDEN = not self.SHOWHIDDEN
        self.updateFileListing()

    def moveAction(self, widget):
        global PWD
        if self.selectedRow != -1:
            selectedLink = self.rows[self.selectedRow]
        if self.selectedRow != -1 and selectedLink[0]!=False and selectedLink[1]!=False:
            window = Gtk.Dialog("Move")
            window.set_size_request(300, 100)
            window.set_border_width(10)
            window.set_transient_for(self)
            window.set_modal(True)
            window.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
            windowBody = window.get_content_area(); windowBody.set_orientation(Gtk.Orientation.VERTICAL)
            windowBody.pack_start(Gtk.Label("Enter a new path for this file:"), False, False, 0)
            otherBox = Gtk.Box(); pathEntry = Gtk.Entry()
            pathEntry.set_text(PWD)
            otherBox.pack_start(pathEntry, True, True, 0)
            otherBox.pack_start(Gtk.Label("/%s" % selectedLink[0]), False, False, 0)
            windowBody.pack_start(otherBox, False, False, 0)
            window.show_all()
            reply = window.run()
            if reply == Gtk.ResponseType.OK:
                newPath = pathEntry.get_text()
                if newPath.endswith('/'):
                    # remove trailing slash
                    newPath = newPath[:-1]
                if newPath != PWD:
                    try:
                        os.rename('%s/%s' % (PWD, selectedLink[0]), '%s/%s' % (newPath, selectedLink[0]))
                        # move the user to this directory so they can see where the file went
                        PWD = str(newPath)
                        self.updateFileListing()
                    except OSError:
                        oopsWindow(OSERRORMSG)
            window.destroy()

    def copyAction(self, widget):
        if self.selectedRow != -1:
            selectedLink = self.rows[self.selectedRow]
        if self.selectedRow != -1 and selectedLink[0]!=False and selectedLink[1]!=False:
            window = Gtk.Dialog(title="Copy")
            window.set_transient_for(self)
            window.set_modal(True)
            window.set_border_width(10)
            windowBody = window.get_content_area()
            windowBody.set_orientation(Gtk.Orientation.VERTICAL)
            titleEntry = Gtk.Entry()
            titleEntry.set_text(selectedLink[0])
            windowBody.pack_start(Gtk.Label("Enter a new name for the copy"), False, False, 0)
            windowBody.pack_start(titleEntry, False, False, 0)
            window.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
            window.show_all()
            reply = window.run()
            newTitle = titleEntry.get_text()
            if reply == Gtk.ResponseType.OK and newTitle != selectedLink[0]:
                try:
                    os.symlink(selectedLink[1], '%s/%s' % (PWD, newTitle))
                except OSError:
                    oopsWindow(OSERRORMSG)
                self.updateFileListing()
            window.destroy()

    def editAction(self, widget=None, row=None, **kwargs):
        selectedLink = (False, False)
        if 'path' in kwargs.keys():
            selectedLink = kwargs['path']
        elif self.selectedRow != -1:
            selectedLink = self.rows[self.selectedRow]
        if selectedLink[0]!=False and selectedLink[1]!=False:
            # selectedLink is false when the selected row is:
            # 1) a message row, 2) a folder row, 3) no row is selected
            editWindow = Gtk.Dialog(title="Edit")
            if self.closeme:
                editWindow.connect('destroy', killme)
            editWindow.set_border_width(10)
            editWindow.set_transient_for(self)
            editWindow.set_modal(True) # block the main window until this dialog is dismissed
            editWindow.add_buttons("Apply", Gtk.ResponseType.APPLY, "Cancel", Gtk.ResponseType.CANCEL)
            editWindowBody = editWindow.get_content_area()
            editWindowBody.set_orientation(Gtk.Orientation.VERTICAL)
            box = Gtk.Box(); editWindowBody.pack_start(box, False, False, 0)
            linkTitle = Gtk.Entry(); linkTitle.set_text(selectedLink[0])
            box.pack_start(Gtk.Label("Title: "), False, False, 0)
            box.pack_start(linkTitle, True, True, 0) # True means 'stretch to fill space'
            box2 = Gtk.Box(); editWindowBody.pack_start(box2, False, False, 0)
            linkTarget = Gtk.Entry(); linkTarget.set_text(selectedLink[1])
            linkTarget.set_width_chars(30)
            # browse button
            browseButton = Gtk.Button("Browseâ€¦")
            browseButton.connect('clicked', self.browseWindow, linkTarget)
            box2.pack_start(Gtk.Label("Target: "), False, False, 0)
            box2.pack_start(linkTarget, True, True, 0)
            box2.pack_start(browseButton, False, False, 0)
            editWindow.show_all()
            reply = editWindow.run()
            if reply == Gtk.ResponseType.APPLY:
                try:
                    linkTargetText = linkTarget.get_text()
                    linkTitleText = linkTitle.get_text()
                    if linkTargetText != selectedLink[1]:
                        # if target changed, use 'os.symlink'
                        os.remove('%s/%s' % (PWD, selectedLink[0]))
                        os.symlink(linkTargetText, '%s/%s' % (PWD, linkTitleText))
                    elif linkTitleText != selectedLink[0]:
                        # otherwise just title change can be accomplished via os.rename
                        os.rename('%s/%s' % (PWD, selectedLink[0]), '%s/%s' % (PWD, linkTitleText))
                except OSError:
                    oopsWindow(OSERRORMSG)
            editWindow.destroy()
            self.updateFileListing()

    def browseWindow(self, widget, targetEntry):
        # lets user pick a file to target
        window = Gtk.FileChooserDialog("Choose a fileâ€¦")
        window.set_current_folder(PWD)
        window.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
        window.show_all()
        reply = window.run()
        returnVal = None
        if reply == Gtk.ResponseType.OK:
            targetEntry.set_text(window.get_filename())
        window.destroy()

    def newAction(self, widget=None, **kwargs):
        window = Gtk.Dialog(title="Create new symlink")
        window.set_border_width(10)
        windowBody = window.get_content_area()
        windowBody.set_orientation(Gtk.Orientation.VERTICAL)
        titleEntry = Gtk.Entry(); targetEntry = Gtk.Entry()
        targetEntry.set_width_chars(30)
        if 'target' in kwargs.keys():
            targetEntry.set_text(kwargs['target'])
        titleEntryBox = Gtk.Box()
        titleEntryBox.pack_start(Gtk.Label('Title:   %s/' % PWD), False, False, 0)
        titleEntryBox.pack_start(titleEntry, True, True, 0)
        windowBody.pack_start(titleEntryBox, False, False, 0)
        targetEntryBox = Gtk.Box()
        targetEntryBox.pack_start(Gtk.Label("Target: "), False, False, 0)
        targetEntryBox.pack_start(targetEntry, True, True, 0)
        # browse button
        browseButton = Gtk.Button("Browseâ€¦")
        browseButton.connect('clicked', self.browseWindow, targetEntry)
        targetEntryBox.pack_start(browseButton, False, False, 0)
        windowBody.pack_start(targetEntryBox, False, False, 0)
        window.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
        window.show_all()
        reply = window.run()
        if reply == Gtk.ResponseType.OK and len(targetEntry.get_text())>0 and len(titleEntry.get_text())>0:
            try:
                os.symlink(targetEntry.get_text(), '%s/%s' % (PWD, titleEntry.get_text()))
            except OSError:
                oopsWindow(OSERRORMSG)
        self.updateFileListing()
        window.destroy()

    def deleteAction(self, widget):
        if self.selectedRow != -1:
            selectedLink = self.rows[self.selectedRow]
        if self.selectedRow != -1 and selectedLink[0]!=False and selectedLink[1]!=False:
            window = askWindow("Are you sure you want to delete this?")
            window.set_transient_for(self)
            window.set_modal(True)
            reply = window.run()
            if reply == Gtk.ResponseType.YES:
                os.remove('%s/%s' % (PWD, selectedLink[0]))
                self.updateFileListing()
            window.destroy()

def openFm(*args):
    call('xdg-open %s' % PWD,shell=True)

def killme(*args):
    # can't seem to find a better way to kill this program...
    # the answer is probably using Gtk.Application but I can't be arsed today
    call('pid=$(ps -ef | grep "%s" | grep -v grep | grep -v geany |\
        awk \'{print $2}\') && for i in pid; do kill "$pid"; done' \
        % os.path.realpath(__file__),shell=True)

def main():
    global PWD
    # first parse command line arguments
    parser = argparse.ArgumentParser(description='graphically manage symbolic links')
    parser.add_argument('path-to-edit', help='open an edit dialog for this path', nargs='?')
    parser.add_argument('-new', help='open a dialog to create a new link', action='store_true')
    parser.add_argument('-dir', help='start in this path instead of the default', default=DEFAULTPATH)
    parser.add_argument('-leaveopen', help='leave main window open after editing', action='store_true')
    arg = vars(parser.parse_args()) # return arguments as a dictionary
    if os.path.isdir(arg['dir']):
        PWD = arg['dir']
    elif os.path.isdir(DEFAULTPATH):
        PWD = DEFAULTPATH
    else:
        PWD = HOME


    window = MainWindow()
    window.set_icon_from_file("%s/wrench.png" % SRCPATH)
    window.connect("delete-event", Gtk.main_quit)

    if arg['path-to-edit'] and not arg['leaveopen']:
        window.closeme=True
        window.hide()
    else:
        window.show_all()

    if arg['path-to-edit']:
        if arg['path-to-edit'].startswith('/'):
            # an absolute path
            PWD = os.path.dirname(arg['path-to-edit'])
        else:
            # hopefully a relative path
            PWD = os.getcwd()
        if os.path.islink(arg['path-to-edit']):
            window.editAction(path=(os.path.basename(arg['path-to-edit']), os.readlink(arg['path-to-edit'])))
        else:
            # you mistyped the command or path is not a symlink; show the mainwindow after all!
            window.closeme=False; window.show_all()
            window.updateFileListing()
        if os.path.exists(arg['path-to-edit']) and not arg['leaveopen']:
            # if a non-symlink is opened, make a new link to it as target
            window.newAction(target=arg['path-to-edit'])
    elif arg['new']:
        window.newAction()
    else:
        window.updateFileListing()

    Gtk.main()

if __name__ == "__main__":
    main()

